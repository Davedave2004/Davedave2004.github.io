{"version":3,"sources":["components/CustomInput.tsx","img/logo.png","components/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomInput","props","useState","input","setInput","regExp","setRegExp","refContainer","useRef","useEffect","availableRegexTypes","number","current","textContent","toString","regexType","safeProps","ref","type","value","onChange","e","preventDefault","target","test","Header","logoNav","src","logo","label","href","title","alt","map","item","className","App","customRegex","setCustomRegex","id","RegExp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAOO,SAASA,EAAYC,GACxB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,MAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAeC,iBAA2B,MAGhDC,qBAAU,WACN,IAAMC,EAAsB,CACxBC,OAAQ,SAKRV,EAAMI,QACNC,EAAUL,EAAMI,QACZE,EAAaK,UAASL,EAAaK,QAAQC,YAArB,gCAA4DZ,EAAMI,OAAOS,cAC7Fb,EAAMc,WAAad,EAAMc,aAAaL,IAC5CJ,EAAUI,EAAoBT,EAAMc,YAChCR,EAAaK,UAASL,EAAaK,QAAQC,YAArB,0BAAsDZ,EAAMc,eAE3F,CAACd,EAAMc,UAAWd,EAAMI,SAa8BJ,EAAlDc,UAAkDd,EAAvCI,OAXlB,IAW4CW,EAA5C,YAAyDf,EAAzD,GACA,OACI,gCACI,oBAAIgB,IAAKV,EAAT,8CACA,mCACIW,KAAK,OACLC,MAAOhB,EACPiB,SAlBS,SAACC,GAClBA,EAAEC,iBACF,IAAOH,EAASE,EAAEE,OAAXJ,MAEHd,EAAOmB,KAAKL,IAEZf,EAASe,KAaDH,OChDL,UAA0B,iCCiBlC,SAASS,EAAOxB,GACnB,IAAMyB,EAAU,CACZC,IAAKC,EACLC,MAAO,SACPC,KAAM,QAcV,EAA0B5B,mBAASwB,EAAQG,OAA3C,mBAAOE,EAAP,UAEA,OACI,mCACI,oBAAGD,KAAMJ,EAAQI,KAAjB,UACI,qBAAKH,IAAKD,EAAQC,IAAKK,IAAI,gBAC3B,gCAAQD,OAEZ,8BAnBoB,CACxB,CACIF,MAAO,MACPC,KAAM,QAEV,CACID,MAAO,aACPC,KAAM,gBAaQG,KAAI,SAACC,GAAD,OACV,mBAAGC,UAAU,UAAUL,KAAMI,EAAKJ,KAAlC,SAAyCI,EAAKL,gBCLnDO,MAlCf,WACE,MAAsClC,mBAAS,MAA/C,mBAAOmC,EAAP,KAAoBC,EAApB,KACM/B,EAAeC,iBAA2B,MAahD,OACE,sBAAK2B,UAAU,MAAf,UACE,mBAAGI,GAAG,QACN,cAACd,EAAD,IACA,0BAASc,GAAG,aAAZ,UACE,cAACvC,EAAD,CAAae,UAAU,WACvB,uBACA,cAACf,EAAD,CAAaK,OAAQ,eACrB,uBACA,uBACA,uBACA,6DAAoC,uBAAOe,SAtBjD,SAAsBC,GACpB,IAAOF,EAASE,EAAEE,OAAXJ,MACP,IACI,IAAIqB,OAAOrB,GACXmB,EAAe,IAAIE,OAAOrB,IACtBZ,EAAaK,UAASL,EAAaK,QAAQC,YAAc,IAC/D,MAAMQ,GACAd,EAAaK,UAASL,EAAaK,QAAQC,YAArB,iCAgB1B,cAACb,EAAD,CAAaK,OAAQgC,IACrB,oBAAIpB,IAAKV,WCpBFkC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f4bb5055.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\n\r\ninterface customInputProps extends React.HTMLProps<HTMLInputElement> {\r\n    regexType?: string;\r\n    regExp?: RegExp;\r\n}\r\n\r\nexport function CustomInput(props: customInputProps) {\r\n    const [input, setInput] = useState('');\r\n    const [regExp, setRegExp] = useState(/.?/);\r\n    const refContainer = useRef<HTMLHeadingElement>(null);\r\n\r\n    // Apply regex value if available from props\r\n    useEffect(() => {\r\n        const availableRegexTypes = {\r\n            number: /^\\d*$/,\r\n        };\r\n        \r\n        type RegexName = keyof typeof availableRegexTypes;\r\n\r\n        if (props.regExp) {\r\n            setRegExp(props.regExp);\r\n            if (refContainer.current) refContainer.current.textContent = `I am using your regex ${props.regExp.toString()}` ;\r\n        } else if(props.regexType && props.regexType in availableRegexTypes) {\r\n            setRegExp(availableRegexTypes[props.regexType as RegexName]);\r\n            if (refContainer.current) refContainer.current.textContent = `I am using type ${props.regexType}`;\r\n        }\r\n    }, [props.regexType, props.regExp])\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        const {value} = e.target;\r\n        \r\n        if (regExp.test(value)) \r\n        {\r\n            setInput(value);\r\n        }\r\n    }\r\n\r\n    // Do not set attributes that might produce conflict\r\n    const {regexType, regExp : customRegExp, ...safeProps} = props;\r\n    return (\r\n        <div>\r\n            <h1 ref={refContainer}>I am currently using the default</h1>\r\n            <input \r\n                type=\"text\" \r\n                value={input} \r\n                onChange={handleChange}\r\n                {...safeProps}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/logo.e850297e.png\";","import React, { useState } from \"react\";\r\nimport logo from '../img/logo.png';\r\n\r\ntype navItem = {\r\n    label: string;\r\n    href: string;\r\n}\r\n\r\ninterface headerProps {\r\n    logoNav?: {\r\n        logoSrc: string;\r\n        label: string;\r\n        href: string;\r\n    }\r\n    navItems?: navItem[];\r\n}\r\n\r\nexport function Header(props: headerProps) {\r\n    const logoNav = {\r\n        src: logo,\r\n        label: 'MyPage',\r\n        href: '#top'\r\n    }\r\n\r\n    const navItems: navItem[] = [\r\n        {\r\n            label: 'Top',\r\n            href: '#top'\r\n        },\r\n        {\r\n            label: 'Components',\r\n            href: '#components'\r\n        }\r\n    ];\r\n\r\n    const [title, setTitle] = useState(logoNav.label);\r\n\r\n    return (\r\n        <header>\r\n            <a href={logoNav.href}>\r\n                <img src={logoNav.src} alt=\"header logo\" />\r\n                <label>{title}</label>\r\n            </a>\r\n            <nav>\r\n                {navItems.map((item) => (\r\n                    <a className=\"navItem\" href={item.href}>{item.label}</a>\r\n                ))}\r\n            </nav>\r\n      </header>\r\n    )\r\n}","import React, { useState, useRef } from 'react';\nimport './App.scss';\nimport './components/CustomInput'\nimport { Header } from './components/Header';\nimport { CustomInput } from './components/CustomInput';\n\nfunction App() {\n  const [customRegex, setCustomRegex] = useState(/.?/);\n  const refContainer = useRef<HTMLHeadingElement>(null);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const {value} = e.target;\n    try {\n        new RegExp(value);\n        setCustomRegex(new RegExp(value));\n        if (refContainer.current) refContainer.current.textContent = '';\n    } catch(e) {\n        if (refContainer.current) refContainer.current.textContent = `That's not a valid regex!` ;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <a id=\"top\"></a>\n      <Header />\n      <section id=\"components\">\n        <CustomInput regexType='number' />\n        <br />\n        <CustomInput regExp={/^\\d{0,11}$/} />\n        <br />\n        <br />\n        <br />\n        <h1>Set your custom regex here:</h1><input onChange={handleChange} />\n        <CustomInput regExp={customRegex} />\n        <h2 ref={refContainer}></h2>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}